{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,IAAIC,EAAe,EACfC,EAAa,EACbC,EAAY,EAgBHC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBAEN,MACEC,UAAUC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cACVZ,EAAe,EAEfC,EAAaY,OAAOJ,EAAMK,OAC1BZ,EAAYW,OAAOH,EAAKI,OACxBC,aAAY,KACVf,GAAgB,EACZA,EAAeW,EAAOG,QA9B9B,SAAuBE,EAAUP,GAC/B,MAAMQ,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,uBAAqBL,QAAiBP,OAE5Ca,EAAK,sBAAoBN,QAAeP,SAE3CA,MAyBHe,CAAcxB,EAAcC,GACzBwB,MAAKJ,IACJK,EAAA5B,GAAS6B,OAAOC,QAAQP,MAEzBQ,OAAMP,IACLI,EAAA5B,GAAS6B,OAAOG,QAAQR,MAG5BrB,GAAcC,KACbA","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nlet positionProm = 0;\nlet delayValue = 0;\nlet stepValue = 0;\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  positionProm = 0;\n\n  delayValue = Number(delay.value);\n  stepValue = Number(step.value);\n  setInterval(() => {\n    positionProm += 1;\n    if (positionProm > amount.value) {\n      return;\n    }\n\n    createPromise(positionProm, delayValue)\n      .then(resolve => {\n        Notiflix.Notify.success(resolve);\n      })\n      .catch(reject => {\n        Notiflix.Notify.failure(reject);\n      });\n\n    delayValue += stepValue;\n  }, stepValue);\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$positionProm","$47d4ff9957288465$var$delayValue","$47d4ff9957288465$var$stepValue","document","querySelector","addEventListener","event","preventDefault","elements","delay","step","amount","currentTarget","Number","value","setInterval","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.41e2f7e0.js.map"}